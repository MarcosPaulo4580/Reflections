O que acontece ao iniciar um repositório? Por que você precisa fazer isso?
	Ao iniciar um repositório, um diretório .git é criado no diretório onde eu criei o repositório. É necessário criar um repositório para que eu possa criar diferentes commmits de um arquivo.

Em que se difere a área de preparação do diretório de trabalho e do repositório? Qual valor você acha que ela oferece?
	A área de preparação se difere do direório de trabalho e do repositório no seguinte aspecto: ela é uma área onde você coloca os arquivos os quais você quer que façam parte de um mesmo commit, enquanto o repositório é uma área onde ficam os diferentes commits criados e o diretório de trabalho é apenas uma pasta onde ficam arquivos, podendo conter um repositório ou não.

Como você pode usar a área de preparação para garantir que tenha um commit por alteração lógica?
	Para garantir que tenha um commit por alteração lógica, eu adiciono apenas os arquivos que eu modifiquei na área de preparação para a criação do novo commit, e após isso eu utilizo o comando git commit para criar um novo commit a partir dos arquivos adicionados à área de preaparação.

Quais são algumas das situações em que branches seriam úteis para manter seu histórico organizado? Como branches ajudariam?
	Os branches seriam úteis em situações em que desejo criar ramificações dos commits do meu arquivo, ou seja, quando não quero modificar o arquivo principal mas apenas criar versões alternativas de uma versão do arquivo. Por exemplo, na criação de um jogo, eu desejo criar uma ramificação alternativa em que o jogo é mais fácil, mas isso não é uma atualização oficial do jogo principal, então para não criar um novo commit oficial eu crio um branch. Ou quando por exemplo eu quero testar uma ideia que eu não sei se vai dar certo no jogo, então para nao modificar o jogo principal eu crio um branch, ou seja uma ramificação para testar a minha ideia, sem alterar o trabalho principal, então se a ideia der certo na ramificação eu acabo aplicando ela no jogo principal depois. Portanto os branches são principalmente usados para manter a organização de um projeto, de forma que vc mantém uma linha principal de trabalho com ramificações para testes de ideias e versões alternativas, sem alteração da linha principal de trabalho.

Como os diagramas ajudam a visualizar a estrutura de branches?
	Os diagramas ajudam a visualizar a estrutura dos branches, pois eles facilitam a abstração. Ficar pensando nas diferentes ramificações, ou seja, nos diferentes braches e seus commits apenas com a mente, torna muito difícil entender o que está acontecendo. Então desenhar diagramas aumenta a abstração e faz com que observemos a situação de uma forma mais clara, sem ficar quebrando a cabeça, o que ajuda na visualização da estrutura dos branches. Desenhar e fazer diagramas tanto na programação quanto na utilização do git no aspecto de criação de novos branches e commits facilita muito entender a situação, pois são muitas informações que vão sendo criadas ao longo do processo de criação de um projeto, portanto ficar com isso apenas na mente torna o processo mais difícil. Exteriorizar o pensamento por meio de diagramas torna o processo de criação de um projeto mais fácil. 

Qual é o resultado da mesclagem de dois branches? Por que o representamos no diagrama dessa forma?
	O resultado da mesclagem de dois branches é a criação de um novo branch master que contém tanto as alterações do branch não master quanto as alterações feitas no branch master anterior. Isso permite com que mais de uma pessoa trabalhe em um código de um programa de forma independente sem se preocupar com as alterações feitas pelo outro programador, pois o recurso de mesclar branches do git une todas as alterações feitas em um novo branch master. A mesclagem de branches nao exclui os commits dos branches que não são master, ela apenas retira o rótulo criado pelo branch e mantém os commits que ele continha. O branch é representado no diagrama na forma apresentada para melhorar a abstração do cérebro humano e assim facilitar a compreensão de sua estrutura.

Quais são os prós e contras da mesclagem automática do Git v. sempre fazer mesclagens manualmente?
	A mesclagem automática do Git tem vantagem sobre a mesclagem manual quando não há conflito entre dois branches, ou seja, quando não são feitas diferentes alterações em uma mesma parte do código em branches diferentes que serão mesclados, pois quando há esse tipo de conflito, a mesclagem manual se torna mais eficiente, porque o Git não consegue adivinhar qual dos dois commits dos branches em conflito deve ser mantido e qual deve ser excluído, portanto quem deve determinar isso é o usuário (programador) de forma manual.
							
