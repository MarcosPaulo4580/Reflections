Quando gostaria de usar um repositório remoto em vez de manter o trabalho local?
  Eu gostaria de usar um repositório remoto, ao invés de manter o trabalho local, em momentos em que eu estiver trabalhando em um projeto 
  com várias pessoas que estão em outra parte do mundo. Usando o repositório remoto, eu posso compartilhar as alterações feitas por mim no 
  projeto com os outros contribuintes do projeto e eles podem compartilhar as alterações feitas por eles comigo. Ou seja, o uso do 
  repositório remoto serve principalmente para quando o trabalho é compartilhado.
  
Por que você prefere efetuar pull de alterações manualmente do que deixar o Git atualizar-se automaticamente com o seu repositório remoto?
  Eu prefiro efetual pull de alterações manualmente do que deixar o Git atualizar-se automaticamente, pois muitas vezes quando se está 
  trabalhando em um projeto compartilhado, é preciso verificar antes se a alteração feita por um contribuinte foi necessária, se foi
  algo relevante ao projeto, se sim, eu efetuo o pull de alterações, se não, eu não atualizo o meu repositório local com os commits feitos
  pelo contribuinte. O pull de alterações feito manualmente evita criações de commits desnecessários em meu repositório local.
  
Descreva as diferenças entre bifurcações, clones e branches. Quando você usaria um e não os outros?
  A bifurcação permite que eu faça uma cópia do repositório de uma pessoa diretamente nos servidores do github. Já a clonagem de um repo-
  sitório permite que eu faça uma cópia do repositório de uma pessoa diretamente para a minha máquina e não para o meu github, se eu qui-
  ser colocar esse novo repositório na minha conta do github é necessário que eu aplique um push nesse repositório clonado que está em 
  minha máquina. Ou seja, a bifurcação copia o repositório copia o repositório de outra pessoa direto para o meu github, enquanto que os 
  clones copiam para a minha máquina. Já os branches são repositórios que podem estar tanto na minha máquina quando no github e que pos-
  suem vários commmits criados por mim ou por outra pessoa que está trabalhando em um mesmo projeto que eu. Eu usaria uma bifurcação
  quando eu quisesse copiar o repositório de uma pessoa para o meu github e fazer commits nesse repositório utilizando o próprio editor
  do github, pois com essa intenção, não é necessário que eu copie o repositório para a minha máquina. Porém quando quero editar o códi-
  go de um programa que está em um repositório de outra pessoa, eu uso o clone, pois para editar esse código é melhor usar o editor da
  minha máquina.
  
Qual é o benefício de ter uma cópia do último estado conhecido do remoto armazenado localmente?
  O benefício de ter uma cópia do último estado conhecido do remoto armazenado localmente é que se você for trabalhar no projeto em um
  local onde não há acesso a internet, vc pode trabalhar a partir do commit mais atual realizado por vc ou por outros contribuintes, ou
  seja, ter uma cópia do último estado conhecido do remoto armazenado localmente permite que o contribuinte trabalhe na versão mais atual
  do projeto em sua própria máquina sem precisar ter acesso à internet.
  
Como você colaboraria sem usar Git ou GitHub? O que seria mais fácil e mais difícil?
  O Git e o Github facilitam muito a criação de projetos compartilhados e a colaboração, sem usá-los, provavelmente eu colaboraria utili-
  zando email, ou seja, eu ficaria enviando email das novas versões do projeto e das alterações feitas nele para os contribuintes do 
  projeto. Dessa forma ficaria mais difícil testar novas ideias no projeto e versões alternativas do mesmo, pois não teria como eu criar
  ramificações sem alterar o projeto principal. O mais fácil seria a forma com que os projetos seriam enviados, pois é muito mais fácil 
  mandar um arquivo anexado por email do que utilizar push para mandar os commits do repositório da máquina para o repositório remoto no
  Github. Mas depois que se aprende a usar o Git e o Github a colaboração se torna muito mais fácil e eficiente.

Quando você gostaria de fazer alterações em um branch separado, e não diretamente no master? Quais são os benefícios de cada abordagem?
 Eu gostaria de fazer alterações em um branch separado na seguinte situação: quando quero testar uma ideia em um codigo de um pro-
 grama que estou fazendo e não sei se ela vai funcionar, então para não afetar de forma negativa (se a ideia não funcionar) o master, 
 eu faço este teste em uma versão alternativa do projeto em outro branch, se a ideia que eu testei funcionar, eu aplico ela no master
 depois. Desta forma, eu posso ficar testando versões alternativas do meu projeto sem ficar preocupado se vou perder todo o progresso
 do trabalho feito no branch master. Portanto o benefício do master é que ele deve ser usado quando se está trabalhando em algo oficial
 do projeto ou algo que o colaborador tem certeza que vai dar certo, enquanto que um branch separado tem o benefício de permitir a cri-
 ação de versões alternativas do projeto e de testes de ideias incertas sem afetar o trabalho principal contido no branch master.
 
