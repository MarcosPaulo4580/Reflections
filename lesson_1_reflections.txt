Procurando diferenças entre arquivos
	Na lição 4 da aula 1 foi possível aprender uma ferramenta do prompt de comando que facilita muito a procura por diferenças entre duas versões de um mesmo arquivo.
	Quando o código de um programa é muito pequeno, é fácil encontrar as diferenças entre as versões desse código manualmente. Entretanto quando o código é muito grande com centenas ou milhares de linhas, é quase impossível encontrar as diferenças entre as versões de modo manual, portanto o comando FC (usado no windows) ou Diff (usado no linux e mac) no console ajuda muito nesse aspecto, pois assim fica mais fácil encontrar um bug ou um erro de digitação ocasionado por uma mudança do código comparando a nova versão com a versão anterior apenas nas partes do código que foram mudadas.

Commits Manuais
	Na sua opinião, quais são os prós e contras de escolher manualmente quando criar um commit, como ocorre no Git, v. o salvamento automático de versões, como no Google Docs?
	As vantagens de escolher manualmente quando criar um commit é que vc pode salvar novas versões do arquivo apenas quando há uma mudança significativa feita por vc e além disso vc pode acionar descrições no novo commit indicando a mudança significativa feita. Escolhendo manualmente não são criados novas versões do mesmo arquivo sem necessidade, ou seja, não vira uma bagunça. A única desvantagem de escolher manualmente quando criar um commit em relação ao salvamento automático é que as vezes é esquecido de criar o commit quando necessário, portanto todas as mudanças significativas são perdidas. No salvamento automático isso não acontece.

Commits de vários arquivos
	Por que você acha que alguns sistemas de controle de versão, como o Git, permitem salvar vários arquivos em um commit, enquanto outros, como o Google Docs, tratam cada arquivo separadamente?
	Alguns sistemas de controle de versão, como o git, permitem salvar vários arquivos em um commit, pois existem arquivos que quando mudados necessitam que outro arquivo também seja mudado, pois ambos estão relacionados. Isso é muito comum em códigos de programas, pois um arquivo pode ser um pedaço do código e outro pode ser outro pedaço que dependa do anterior, portanto quando um é mudado, o outro também deve ser mudado. Acredito que outros sistemas de controle de versão, como o Google Docs, tratam cada arquivo separadamente, pois esses sistemas geralmente não são usados por programadores, que são os que mais usam arquivos dependentes de outros.

Como usar o Git para visualizar o histórico
	Como usar os comandos git log e git diff para visualizar o histórico dos arquivos?
	Primeiro é necessário localizar o diretório onde os arquivos estão localizados, utilizando cd nome_do_arquivo e dar enter. Depois usa-se o comando git log para exibir todos os commits criados. Após isso é necessário usar o comando git diff para comparar dois commits, para isso usa-se os comandos seguintes: git diff ID_do_primeiro_commit ID_do_segundo_commit. Depois pode-se utilizar o comando git config --global color.ui auto para colocar de verde as linhas que foram adicionadas ao código e de vermelho as linhas que foram retiradas. A partir disso é possível visualizar versões anteriores do arquivo e além disso verificar as diferenças entre os commits criados.

Segurança com o controle de versão
	De que modo o controle de versão pode dar a você mais segurança para fazer alterações que podem danificar algo?
	O controle de versão pode me dar mais segurança para fazer alterações pois ele me permite verificar commits anteriores antes do bug que está acontecendo ter sido introduzido no código, ou seja, depois que eu fiz alguma alteração no código e percebo um bug no meu programa, eu posso usar os comandos git log, git diff e git checkout para verificar versões anteriores do arquivo até encontrar o primeiro commit em que ocorreu o bug. Isso permite ao programador fazer grandes alterações em seu código sem medo de perder todo o trabalho, pois versões anteriores sem as alterações que introduziram problemas ao programa estão salvas, o que faz com que programe-se de forma mais livre para testar diferentes ideias no código.

Como você quer usar o Git?
	Agora que você já configurou a sua área de trabalho, você quer usar o Git para quê?
	Quero usar o git principalmente para comparar versões de um mesmo programa meu quando, após eu fazer uma alteração, eu encontrar algum bug, pois com os recursos do Git fica muito mais fácil fazer comparações entre diferentes versões de um arquivo afim de consertar bugs e erros, usando os comandos git log, git diff e git checkout principalmente. Ou seja, o Git me permite programar de forma mais livre para testar novas ideias em meu código sem medo de perder todo o trabalho, graças aos recursos disponibilizados para verificar e comparar versões anteriores do arquivo de forma rápída e eficiente, sem precisar fazer tudo manualmente.
	
